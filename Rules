#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

require 'set'


preprocess do
  
  # create tag pages for every tag
  tags = Set.new
  articles.each do |item|
    item[:tags].each do |t|
      tags.add(t)
    end
  end
  LANGUAGES.each do |language|
    tags.each do |tag|
      items << Nanoc::Item.new(
        "",
        { :id => "tag-#{tag}",
          :language => language,
          :title => "#{LAYOUT_TRANSLATIONS[:tag][language]} &lsquo;#{tag}&rsquo;",
          :tag => tag },
        "/#{language}/blog/tag/#{tag}/")
    end
  end
  
  # set language tags on items
  @items.each do |item|
    match = /^\/([a-z]{2}|x-[a-z]+)\/.*/.match(item.identifier)
    if not match == nil then
      item[:language] = match.captures[0]
    end
  end
end


passthrough '/static/*'


compile '/subsites/*' do
end

compile '/*/blog/tag/*/' do
  filter :erb
  layout 'tag'
end

compile '/*/blog/*/' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    if item[:extension] == 'md'
      filter :kramdown
    end
    if item[:needs_highlighting]
      filter :colorize_syntax, :default_colorizer => :pygmentsrb
    end
    if item[:layout] == nil then
      layout 'post'
    else
      layout item[:layout]
    end
  end
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    if item[:extension] == 'md'
      filter :kramdown
    end
    if item[:needs_highlighting]
      filter :colorize_syntax, :default_colorizer => :pygmentsrb
    end
    if item[:layout] == nil then
      layout 'page'
    else
      layout item[:layout]
    end
  end
end


route '/subsites/*/' do
  @item.identifier[9..-2]
end

route '/*/blog/tag/*/' do
  url_without_language = @item.identifier.split('/')[2..-1].join('/')
  language_prefix_of(@item) +
      '/' +
      url_without_language +
      (if url_without_language == '' then '' else '/' end) +
      'index.html'
end

route '/*/blog/*/' do
  language, y, m, d, slug = /^\/([a-z]{2}|x-[a-z]+)\/blog\/([0-9]+)\-([0-9]+)\-([0-9]+)\-([^\/]+)/.match(item.identifier).captures
  
  "#{language_prefix_of @item}/blog/#{y}/#{m}/#{slug}/index.html"
end

route '*' do
  # map binary items to their exact names, and non-binary items to .../index.html
  if item.binary?
    url_without_language = @item.identifier.split('/')[2..-1].join('/')
    language_prefix_of(@item) +
        '/' +
        url_without_language +
        @item[:extension]
  else
    url_without_language = @item.identifier.split('/')[2..-1].join('/')
    language_prefix_of(@item) +
        '/' +
        url_without_language +
        (if url_without_language == '' then '' else '/' end) +
        'index.html'
  end
end


layout '*', :erb
